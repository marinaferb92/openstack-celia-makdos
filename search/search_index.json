{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Principal"},{"location":"practica-3.1/","text":"practica-iaw-3.1 Implantaci\u00f3n de Moodle en AWS mediante Ansible 1. Introducci\u00f3n En esta pr\u00e1ctica, el objetivo es automatizar una instalaci\u00f3n de Moodle utilizando una arquitectura de dos niveles, backend y frontend, en Amazon Web Services con Ansible. Para ello crearemos 2 maquinas como en la actividad 1.8 tendremos que tener en cuentas las ips de cada maquina para definirlas dentro del inventario de Ansible En cada playboock deberemos definir en que maquina queremos que se ejecuten los cambios tambien tendremos que tener nuestro dominio definido con la ip publica del balanceador para definirla dentro del archivo de variables variables.yml Una vez hecho esto ejecutamos main.yml , donde tendremos puestos todos los playbooks en el orden de ejcuci\u00f3n que queremos, con el comando ansible-playbook + la ruta de nuestro inmventario + nuesto usuario + nuestra ruta a la clave vockey , comenzaremos a ejecutar los playbooks. Una vez terminado nos dar\u00e1 un resumen de los cambios que ha realizado Una vez hecho esto podremos entrar en nuestro moodle y entrando en el administrador con las claves predefinidas en las variables, podremos comenzar a configurarlo.","title":"Practica 3.1"},{"location":"practica-3.1/#practica-iaw-31","text":"","title":"practica-iaw-3.1"},{"location":"practica-3.1/#implantacion-de-moodle-en-aws-mediante-ansible","text":"","title":"Implantaci\u00f3n de Moodle en AWS mediante Ansible"},{"location":"practica-3.1/#1-introduccion","text":"En esta pr\u00e1ctica, el objetivo es automatizar una instalaci\u00f3n de Moodle utilizando una arquitectura de dos niveles, backend y frontend, en Amazon Web Services con Ansible. Para ello crearemos 2 maquinas como en la actividad 1.8 tendremos que tener en cuentas las ips de cada maquina para definirlas dentro del inventario de Ansible En cada playboock deberemos definir en que maquina queremos que se ejecuten los cambios tambien tendremos que tener nuestro dominio definido con la ip publica del balanceador para definirla dentro del archivo de variables variables.yml Una vez hecho esto ejecutamos main.yml , donde tendremos puestos todos los playbooks en el orden de ejcuci\u00f3n que queremos, con el comando ansible-playbook + la ruta de nuestro inmventario + nuesto usuario + nuestra ruta a la clave vockey , comenzaremos a ejecutar los playbooks. Una vez terminado nos dar\u00e1 un resumen de los cambios que ha realizado Una vez hecho esto podremos entrar en nuestro moodle y entrando en el administrador con las claves predefinidas en las variables, podremos comenzar a configurarlo.","title":"1. Introducci\u00f3n"},{"location":"sites/practica-4.5/","text":"practica-iaw-4.5 Terraform Terraform es una infraestructura que nos permite de forma automatizada crear, modificar y eliminar infraestructuras. En esta practica vamos a hacerlo gestionando el servicio de AWS. Para empezar, instalaremos Terraform como se nos indica en la gu\u00eda oficial guia oficial de terraform . Tambien deberemos instalar la herramienta de AWS cli y configurar nuestras credenciales de acceso utilizando el comando aws configure Una vez hecho podremos empezar a Iniciar el directorio de trabajo para ello ejecutaremos utilizaremos terraform init Con terraform fmt formatean el archivo de configuraci\u00f3n para que sea m\u00e1s legible y terraform validate validamos el archivo de configuraci\u00f3n terraform plan nos permite ver los cambios que se aplicar\u00e1n antes de ejecutarlos. Una vez que tenemos seguridad de que nuestro archivo es correcto ejecutaremos terraform apply o `terraform apply -auto-approve, el segundo crea los recursos sin tener que estar confirmando, y veremos como se comienza a desplegar la infraestructura. Una vez terminado si entramos en AWS vemos que la infraestructura est\u00e1 creada, con sus grupos de seguridad y las IPs flotantes creadas y asociadas a cada instancia. Ejecutando terraform show podremos ver los recursos que tenemos creados y su estado y con terraform destroy podremos destruir la infraestructura completa sin necesidad de indicar nada m\u00e1s, al igual que con apply si indicamos -auto-approve * se eliminar\u00e1 todo sin necesidad de confirmaci\u00f3n","title":"practica-iaw-4.5"},{"location":"sites/practica-4.5/#practica-iaw-45","text":"","title":"practica-iaw-4.5"},{"location":"sites/practica-4.5/#terraform","text":"Terraform es una infraestructura que nos permite de forma automatizada crear, modificar y eliminar infraestructuras. En esta practica vamos a hacerlo gestionando el servicio de AWS. Para empezar, instalaremos Terraform como se nos indica en la gu\u00eda oficial guia oficial de terraform . Tambien deberemos instalar la herramienta de AWS cli y configurar nuestras credenciales de acceso utilizando el comando aws configure Una vez hecho podremos empezar a Iniciar el directorio de trabajo para ello ejecutaremos utilizaremos terraform init Con terraform fmt formatean el archivo de configuraci\u00f3n para que sea m\u00e1s legible y terraform validate validamos el archivo de configuraci\u00f3n terraform plan nos permite ver los cambios que se aplicar\u00e1n antes de ejecutarlos. Una vez que tenemos seguridad de que nuestro archivo es correcto ejecutaremos terraform apply o `terraform apply -auto-approve, el segundo crea los recursos sin tener que estar confirmando, y veremos como se comienza a desplegar la infraestructura. Una vez terminado si entramos en AWS vemos que la infraestructura est\u00e1 creada, con sus grupos de seguridad y las IPs flotantes creadas y asociadas a cada instancia. Ejecutando terraform show podremos ver los recursos que tenemos creados y su estado y con terraform destroy podremos destruir la infraestructura completa sin necesidad de indicar nada m\u00e1s, al igual que con apply si indicamos -auto-approve * se eliminar\u00e1 todo sin necesidad de confirmaci\u00f3n","title":"Terraform"}]}