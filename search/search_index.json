{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"practica-3.1/","title":"practica-iaw-3.1","text":""},{"location":"practica-3.1/#implantacion-de-moodle-en-aws-mediante-ansible","title":"Implantaci\u00f3n de Moodle en AWS mediante Ansible","text":""},{"location":"practica-3.1/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica, el objetivo es automatizar una instalaci\u00f3n de Moodle utilizando una arquitectura de dos niveles, backend y frontend, en Amazon Web Services con Ansible.</p> <p>Para ello crearemos 2 maquinas como en la actividad 1.8 </p> <p>tendremos que tener en cuentas las ips de cada maquina para definirlas dentro del inventario de Ansible </p> <p>En cada playboock deberemos definir en que maquina queremos que se ejecuten los cambios  </p> <p>tambien tendremos que tener nuestro dominio definido con la ip publica del balanceador para definirla dentro del archivo de variables variables.yml</p> <p></p> <p>Una vez hecho esto ejecutamos main.yml, donde tendremos puestos todos los playbooks en el orden de ejcuci\u00f3n que queremos, con el comando <code>ansible-playbook + la ruta de nuestro inmventario + nuesto usuario + nuestra ruta a la clave vockey</code>, comenzaremos a ejecutar los playbooks.</p> <p></p> <p>Una vez terminado nos dar\u00e1 un resumen de los cambios que ha realizado </p> <p>Una vez hecho esto podremos entrar en nuestro moodle y entrando en el administrador con las claves predefinidas en las variables, podremos comenzar a configurarlo.</p> <p> </p>"},{"location":"practica-4.5/","title":"practica-iaw-4.5","text":""},{"location":"practica-4.5/#terraform","title":"Terraform","text":"<p>Terraform es una infraestructura que nos permite de forma automatizada crear, modificar y eliminar infraestructuras. En esta practica vamos a hacerlo gestionando el servicio de AWS.</p> <p>Para empezar, instalaremos Terraform como se nos indica en la gu\u00eda oficial guia oficial de terraform. Tambien deberemos instalar la herramienta de AWS cli y configurar nuestras credenciales de acceso utilizando el comando  <code>aws configure</code> </p> <p>Una vez hecho podremos empezar a Iniciar el directorio de trabajo para ello ejecutaremos utilizaremos <code>terraform init</code> </p> <p>Con <code>terraform fmt</code> formatean el archivo de configuraci\u00f3n para que sea m\u00e1s legible y <code>terraform validate</code> validamos el archivo de configuraci\u00f3n </p> <p><code>terraform plan</code> nos permite ver los cambios que se aplicar\u00e1n antes de ejecutarlos. </p> <p></p> <p>Una vez que tenemos seguridad de que nuestro archivo es correcto ejecutaremos <code>terraform apply</code> o `terraform apply -auto-approve, el segundo crea los recursos sin tener que estar confirmando, y veremos como se comienza a desplegar la infraestructura.</p> <p></p> <p></p> <p></p> <p>Una vez terminado si entramos en AWS vemos que la infraestructura est\u00e1 creada, con sus grupos de seguridad y las IPs flotantes creadas y asociadas a cada instancia.</p> <p></p> <p></p> <p></p> <p>Ejecutando <code>terraform show</code> podremos ver los recursos que tenemos creados y su estado</p> <p></p> <p>y con <code>terraform destroy</code> podremos destruir la infraestructura completa sin necesidad de indicar nada m\u00e1s, al igual que con apply si indicamos -auto-approve* se eliminar\u00e1 todo sin necesidad de confirmaci\u00f3n </p> <p></p> <p></p> <p></p>"}]}